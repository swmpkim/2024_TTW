---
title: "SWMP data exploration"
format: html
editor: visual
toc: true
embed-resources: true
message: false
warning: false
error: true
---

link to this file on github:

# Setup

```{r}
library(SWMPr)
library(skimr)
library(tidyverse)
library(zoo)  # for as.yearmon
```

At this point in the workshop, we have talked about working directories, projects, and the `here` package. This file is set up to pull data files from the `data` folder in this workshop's directory.

The data used to generate this file are from GNDBHWQ, GNDBHNUT, and GNDCRMET - all stations at Grand Bay.

HOWEVER. The code is written in such a way that, if you put your own data files into the `data` folder, you only have to change the stations in the following code chunk to use your own data.

```{r}
stn_wq <- "gndbhwq"
stn_nut <- "gndbhnut"
stn_met <- "gndcrmet"

data_path <- here::here("data")
```

# Import data

## `SWMPr::import_local()`

The wonderfully easy `SWMPr` way:

```{r}
dat_wq <- import_local(data_path,
                       stn_wq)

# note - when I'm not trying to write flexible code, I 
# use the station name directly; e.g.

# import_local(data_path, "gndbhwq")

dat_nut <- import_local(data_path,
                        stn_nut,
                        collMethd = 1)  # grabs only

dat_met <- import_local(data_path,
                        stn_met)
```

## `read.csv()` and friends

If you're not working with SWMP data, you can use other functions to read in data. `SWMPr` takes care of several things for us, and to demonstrate the difference, we'll look at a single year of nutrient data.

```{r}
bhnut <- read.csv(here::here("data", "gndbhnut2018.csv"))
```

To work with Excel files, check out the `readxl` package's `read_xlsx()` function.

# Investigate the data

We want to know several things once we've read in data - did it read in correctly? Do the values look right? How about column names? What is even in this data frame??

As with most things in R, there are many ways to go about this. Let's examine a few.

## Size, names, first few values  

Of the SWMPr-imported data frame.  

```{r}

```

Contrast this with our other nutrient data frame.

```{r}

```

### Sidebar: janitor::clean_names()

We can easily clean up the names in the `read.csv` version thanks to the `janitor` package.

```{r}

```

## Checking column types

Names are different; values look the same. `SWMPr` automatically removed some columns for us, and put all names into lower case.

Something that's less obvious is what `SWMPr` did to the `datetimestamp` column. Let's investigate column types in a couple of different ways:

```{r}

```

The `glimpse()` function from the `dplyr` package gives an overview of all columns:

```{r}

```

## General summaries

And there are some different ways to see summaries:

```{r}

```

### Overall -

-   `glimpse()` (from `dplyr`) is a function I use ALL. THE. TIME.\
-   so is `names()`\
-   `skim()` (from `skimr`) is great for a big-picture view of the dataset.

# Basic plots

Loooook at the data! Base R's `plot()` function is great for initial data exploration.

## Simple points and lines  

```{r}
# salinity time series


# temperature time series


# make the temp plot a line plot instead of points


# make the line blue and add nice axis labels and a title


```

## Histograms  

```{r}
# can make other varieties of plot too,
# like a histogram of water temperatures


# change some options
# breaks, color, labels

```

## Subsetting and Pairs Plots

You can make a scatterplot matrix with a couple different base R functions. They get unhappy if you try to include non-numeric columns, so we will subset our data frame first. The easiest way to select columns is using the `select()` function from the `dplyr` package (part of the tidyverse).

For more information on how to subset in both base R and the tidyverse, check out presentations [`02_poking_and_prodding`](https://github.com/swmpkim/2022_infrequentUseR_wrangling/blob/main/slides/02_poking_and_prodding.pdf) and [`03_modifying_and_adding`](https://github.com/swmpkim/2022_infrequentUseR_wrangling/blob/main/slides/03_modifying_and_adding.pdf) from this '[Data Wrangling for the Infrequent UseR](https://github.com/swmpkim/2022_infrequentUseR_wrangling)' workshop.

```{r}
# what are our columns again?
names(dat_wq)


# let's only keep a few -
# datetimestamp, temp, spcond, sal, do_pct



# and only a small amount of rows because my computer
# got really bogged down with the whole dataset



# we'll make a pairs plot with the first 1000 rows of the data frame


```


### Sidebar - turning things into dates

```{r}
#| eval: false

# notice: if you try to make a time series plot
# on the bhnut data frame, where date is a character
# it doesn't go well

# shoot, what are the names again?
names(bhnut)

# try to plot it
plot(chla_n ~ date_time_stamp, data = bhnut)
```

We can turn things into dates fairly easily using the `lubridate` package. More information [online](https://lubridate.tidyverse.org/).

```{r}
# modify bhnut$date_time_stamp

```

Now we can finally make that same salinity time series plot:

```{r}

```

We can also pull out parts of dates, for example if we wanted to make a boxplot of chla values by year:

```{r}
# create dat_nut$year


# make sure it worked, using glimpse


# now boxplot


# dress it up


# remove year again because for some reason it causes problems
# in the cens_id function


# tidyverse way to remove a column would be:
# dat_nut <- dat_nut |> 
#     select(-year)
```

# Your turn 1

Use your favorite methods from above to investigate the `dat_wq` and `dat_met` data frames.

```{r}

```

------------------------------------------------------------------------

------------------------------------------------------------------------

# QA/QC flags and codes

`SWMPr` has powerful functionality when it comes to QA/QC flags and codes.

## Which flags and codes are present?

```{r}
# qaqcchk function

```

## Which values are flagged as \<MDL?

Sometimes we need to know when values are censored (below detection). The `cens_id()` function in `SWMPr` will tell us, at least with the modern (2007 and later) qa/qc codes, by identifying rows where the flag column contains "-4" or "-5".

Note, this function needs to be used before the `qaqc()` function because the latter removes the flag columns.

```{r}
# cens_id function


# create columns in dat_nut, using flag_type = "below"


# see how it looks now, with glimpse

```

## Using QA/QC flags to remove 'bad' values

```{r}
# what flags and codes are we dealing with, again?


# now create qc_nut
# I'm okay keeping 1s, in addition to 0 and -4


# see what that did  



# and do the same for wq and met

```

Make sure that got rid of those wacky salinity values:

```{r}
# by making a plot
```

# Summarizing data

Let's say you want monthly averages for your parameters.

## With `SWMPr`

```{r}
# aggreswmp - create monthly_wq data frame


# take a look with glimpse


# notice how datetimestamp is represented now -
# R does not have a "year-month" class
# so the typical way to deal with monthly data is to tack on -01
# to represent the first day of each month


# now plot those salinity values again!

```

The defaults for `aggreswmp` are to run on every parameter, calculating the mean with any NAs removed. You can change that if you want, to (e.g.) monthly maxima:

```{r}
# note, if we don't tell it to remove NAs,
# it won't 
# but we can tell it to

# create mmax_wq data frame


# look at it


# plot it

```

Note, we can put both those lines (mean and max monthly salinities) on the same plot, and we will with `ggplot2`. But first, more `aggreswmp`.

### Totals

We're not necessarily interested in average precipitation within a month; we want to know the total! Sometimes even by day! SWMPr does that too.

```{r}
# create daily_rain and monthly_rain data frames
# don't forget to remove nas


# another plot type - barplot!


```

## With the tidyverse

What `aggreswmp` did for us was group each month together, and then calculate the summary we told it to. We'll have to do that extra step of defining months before we can summarize with the tidyverse. This method is nice because you can use it on non-SWMP datasets, and you can use more than a single function on each parameter (e.g. we might want min, mean, and max values for each month).

We're going to pick up a couple of new skills here too, particularly use of the pipe.

### Pick a couple of parameters

We are using the `zoo` package to create a "year-month" format from our datetimestamp column - like what SWMPr did for us, but it's displayed a little more nicely. We are also using some functions from the `dplyr` package (part of the tidyverse) to actually add that column, then summarize other columns by year-month.

```{r}
# create monthly_wq2
# create month column, and 
# summarize salinity into mean and max; and temp into mean and max


# take a look


# plot mean monthly salinity  

```


### Note about summarizing with the tidyverse  

Up until this point, data frames that we imported and worked on using the `SWMPr` package were not only data frames, but also a special `swmpr` object type. Once we start using `filter`, `mutate`, and `summarize`, that special object type is removed. This is only a problem if you want to keep using SWMPr functions down the road - which I usually don't. So I don't worry about it.  

If this ever does affect you, you can turn your data frame back into a `swmpr` object with the `swmpr()` function - all you have to do is specify the data frame and the associated SWMP station. See `?swmpr` for details.  

# Your Turn 2  

Create a data frame where you summarize your favorite parameter by day or month, and make a graph of it. Share with your neighbor!  

```{r}

```




# `ggplot2` intro

`ggplot2` is a phenomenal graphing package. We don't have time here to get into all of the nuances, but we will make a few plots with the following code. The [Data visualization](https://r4ds.hadley.nz/data-visualize) chapter of [R for Data Science](https://r4ds.hadley.nz/) is a great introductory resource for learning how these pieces get put together; and [Chapter 9 (Layers)](https://r4ds.hadley.nz/layers) goes through more powerful options, including facets and smooths. [Chapter 11 (Communication)](https://r4ds.hadley.nz/communication) touches on ways to make the graphs more attractive by modifying labels, annotations, legends, and the general body of the plot.

The `esquisse` package can get you started assembling ggplots in a point-and-click way, and `ggThemeAssist` can help with beautifying. You installed both packages before the workshop and can get to them from the "Addins" drop-down under the main toolbar.

## Building a line graph

Here, we are going to make a graph that includes lines for our monthly mean and max salinity values. We will construct it in a few different ways and start learning about the different ways to layer information together.

Note in this code chunk, we also see how to assign labels to the graph - title, subtitle, and x- and y-axis labels.

```{r}
# if we want to put points and lines on the graph to represent the same
# data, we can put all of the identifying information in the top line
ggplot(monthly_wq2, aes(x = month, y = mean_sal)) +
    geom_point() +
    geom_line() +
    labs(title = "mean monthly salinity",
         subtitle = paste("at", stn_wq),
         x = "Month",
         y = "Salinity (psu)")
```

### Multiple lines

We can put multiple lines onto the same plot by adding another `geom_line()` layer.

```{r}
# one line for mean sal, one for max sal

```

### Colors

We can specify colors for the lines.

```{r}

```

Even better, we can let `ggplot` assign colors based on values in the data - and it will automatically create a legend! Here, `col` goes *inside* the `aes()` argument.

```{r}

```

Another nice thing about defining colors inside `aes()` is, you can let it assign those colors based on actual data values - for example, censored or non-censored!

```{r}

```

If you don't like the default colors, you can change them - `scale_color_brewer()` is a good layer to play around with (it's built into `ggplot2` and you can view palettes on https://colorbrewer2.org/). I also quite like the `khroma` package for colorblind-friendly palettes; website: https://packages.tesselle.org/khroma/ .

```{r}

```

## Different data frames

We can even use data from different data frames. Suppose you have been working with 2 or 3 stations and want the mean monthly salinity of all of them on the same graph.

For our example, we'll simply use mean and max salinity out of the different data frames we calculated above. When you do this, you have to specify the data in each line, not at the top of the call.

```{r}

```

## Facets

Facets are different panels in the graph, based on some category in the data. For example, we might want to see if the relationship between two variables varies by month or year.

```{r}
# first we have to make a year column
monthly_wq2 <- monthly_wq2 |> 
    mutate(year = lubridate::year(month))

# then we can make a plot and use
# facet_wrap


```

## Plot as object  

You can also save a plot as an object (you'll frequently see people name these, simply, `p`), then add to it in various ways. This is particularly helpful when experimenting with color palettes, labels, and themes.  

```{r}
# create a plot


# view the plot


# add labels to the plot


# use a different color palette
# save it to the object when you like it


# try theme_bw()


# incorporate all the pieces you like


# view the plot again
```


# Your Turn 3  

Take your plot from 'your turn 2', figure out how to make it in `ggplot2`, and make it either [ a) as beautiful or b) as ugly ] as you possibly can. Compete with your neighbor.    

```{r}

```



# More SWMPr and SWMPrExtension functionality  

I am not sure if we'll have time to get to these functions, and if we do, we'll probably all be tired of typing. So we'll just talk through them and run them together.  

## SWMPr

If you are using your own data, you'll need to change the years that appear in the code below.

```{r}
# make a plot like the SWMPrats widget
plot_summary(qc_wq, param = 'sal')

# make a wind rose
plot_wind(qc_met)
plot_wind(qc_met, type = "season")
plot_wind(qc_met, type = "season", years = 2018:2020)

# one year over historical data
plot_quants(qc_wq, param = 'temp',
            yr = 2020,
            yrstart = 2018,
            yrend = 2019)
```

## SWMPrExtension

```{r}
library(SWMPrExtension)
```

```{r}
# similar to the last of the above
historical_daily_range(qc_wq, param = 'temp',
                       target_yr = 2020)

# monthly ranges
historical_range(qc_wq, param = 'temp',
                 target_yr = 2020,
                 hist_rng = c(2018, 2019))
# can also include a threshold
historical_range(qc_wq, param = 'temp',
                 target_yr = 2020,
                 hist_rng = c(2018, 2019),
                 criteria = 25)

# seasonal boxplot
seasonal_boxplot(qc_wq, param = 'temp')

# can add a target year to see how it compares
seasonal_boxplot(qc_wq, param = 'temp',
                 target_yr = 2020)

# precip!
seasonal_barplot(qc_met, param = 'totprcp')

# assign seasons
seasonal_barplot(qc_met, param = 'totprcp',
                 season_grps = list(c(1,2,3), c(4,5,6), c(7,8,9), c(10, 11, 12)),
                 season_names = c('Winter', 'Spring', 'Summer', 'Fall'))
```
